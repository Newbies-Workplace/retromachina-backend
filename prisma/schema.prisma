generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Team {
  id              String @id @default(uuid())
  name            String
  scrum_master_id String

  User User? @relation(fields: [scrum_master_id], references: [id])

  TeamUser      TeamUsers[]
  Task          Task[]
  Retrospective Retrospective[]
  Invite        Invite[]
  Board         Board?
}

model TeamUsers {
  id      String @id @default(uuid())
  team_id String
  user_id String

  Team Team? @relation(fields: [team_id], references: [id], onDelete: Cascade)
  User User? @relation(fields: [user_id], references: [id])
}

model Board {
  team_id           String @id
  default_column_id String

  BoardColumns BoardColumn[]
  Tasks        Task[]

  Team Team @relation(fields: [team_id], references: [id], onDelete: Cascade)
}

model BoardColumn {
  id      String @id @default(uuid())
  team_id String
  order   Int
  name    String
  color   String
  Tasks   Task[]

  Board Board @relation(fields: [team_id], references: [team_id], onDelete: Cascade)
}

model User {
  id          String @id @default(uuid())
  nick        String
  email       String @unique
  avatar_link String
  user_type   Role   @default(USER)
  google_id   String @unique

  TeamUsers TeamUsers[]
  Team      Team[]
  Task      Task[]
  Invite    Invite[]
}

model Task {
  id          String  @id @default(uuid())
  description String  @db.Text
  owner_id    String
  retro_id    String?
  team_id     String
  column_id   String?

  Board         Board?         @relation(fields: [team_id], references: [team_id], onDelete: Cascade, map: "Task_Board_team_id_fkey")
  User          User?          @relation(fields: [owner_id], references: [id])
  Team          Team?          @relation(fields: [team_id], references: [id], onDelete: Cascade)
  Column        BoardColumn?   @relation(fields: [column_id], references: [id])
  Retrospective Retrospective? @relation(fields: [retro_id], references: [id])
}

model Retrospective {
  id         String   @id @default(uuid())
  team_id    String
  date       DateTime
  is_running Boolean

  Team Team? @relation(fields: [team_id], references: [id], onDelete: Cascade)

  Task Task[]
}

model Invite {
  id            String @id @default(uuid())
  email         String
  team_id       String
  from_scrum_id String

  Team Team? @relation(fields: [team_id], references: [id], onDelete: Cascade)
  User User? @relation(fields: [from_scrum_id], references: [id])
}

enum Role {
  USER
  SCRUM_MASTER
}
